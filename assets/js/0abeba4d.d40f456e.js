"use strict";(self.webpackChunktquic_website=self.webpackChunktquic_website||[]).push([[7204],{3905:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>h});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},i=Object.keys(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var s=a.createContext({}),_=function(t){var e=a.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},p=function(t){var e=_(t.components);return a.createElement(s.Provider,{value:e},t.children)},c="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},u=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,i=t.originalType,s=t.parentName,p=o(t,["components","mdxType","originalType","parentName"]),c=_(n),u=r,h=c["".concat(s,".").concat(u)]||c[u]||d[u]||i;return n?a.createElement(h,l(l({ref:e},p),{},{components:n})):a.createElement(h,l({ref:e},p))}));function h(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var s in e)hasOwnProperty.call(e,s)&&(o[s]=e[s]);o.originalType=t,o[c]="string"==typeof t?t:r,l[1]=o;for(var _=2;_<i;_++)l[_]=n[_];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},665:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>_});var a=n(7462),r=(n(7294),n(3905));const i={title:"C/C++ HTTP/3 API Reference",sidebar_position:4},l="C/C++ HTTP/3 API Reference",o={unversionedId:"api_reference/c_h3",id:"api_reference/c_h3",title:"C/C++ HTTP/3 API Reference",description:"Preliminaries",source:"@site/docs/api_reference/c_h3.md",sourceDirName:"api_reference",slug:"/api_reference/c_h3",permalink:"/docs/api_reference/c_h3",draft:!1,editUrl:"https://github.com/tencent/tquic-website/tree/main/packages/create-docusaurus/templates/shared/docs/api_reference/c_h3.md",tags:[],version:"current",lastUpdatedBy:"Sijie Yang",lastUpdatedAt:1704956763,formattedLastUpdatedAt:"Jan 11, 2024",sidebarPosition:4,frontMatter:{title:"C/C++ HTTP/3 API Reference",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"C/C++ QUIC API Reference",permalink:"/docs/api_reference/c_quic"},next:{title:"Contributing",permalink:"/docs/category/contributing"}},s={},_=[{value:"Preliminaries",id:"preliminaries",level:2},{value:"Common types",id:"common-types",level:2},{value:"Configurations",id:"configurations",level:2},{value:"HTTP/3 configurations initialization",id:"http3-configurations-initialization",level:3},{value:"http3_config_new",id:"http3_config_new",level:4},{value:"http3_config_free",id:"http3_config_free",level:4},{value:"HTTP/3 configurations customization",id:"http3-configurations-customization",level:3},{value:"http3_config_set_max_field_section_size",id:"http3_config_set_max_field_section_size",level:4},{value:"HTTP/3 Connection",id:"http3-connection",level:2},{value:"Instantiation and destruction",id:"instantiation-and-destruction",level:3},{value:"http3_conn_new",id:"http3_conn_new",level:4},{value:"http3_conn_free",id:"http3_conn_free",level:4},{value:"Event-driven and Callbacks",id:"event-driven-and-callbacks",level:3},{value:"http3_conn_set_events_handler",id:"http3_conn_set_events_handler",level:4},{value:"http3_conn_process_streams",id:"http3_conn_process_streams",level:4},{value:"HTTP/3 Callbacks",id:"http3-callbacks",level:3},{value:"on_stream_headers",id:"on_stream_headers",level:4},{value:"on_stream_data",id:"on_stream_data",level:4},{value:"on_stream_finished",id:"on_stream_finished",level:4},{value:"on_stream_reset",id:"on_stream_reset",level:4},{value:"on_stream_priority_update",id:"on_stream_priority_update",level:4},{value:"on_conn_goaway",id:"on_conn_goaway",level:4},{value:"Miscellaneous functions",id:"miscellaneous-functions",level:3},{value:"http3_for_each_setting",id:"http3_for_each_setting",level:4},{value:"http3_send_goaway",id:"http3_send_goaway",level:4},{value:"HTTP/3 request",id:"http3-request",level:2},{value:"Request and Response",id:"request-and-response",level:3},{value:"http3_stream_new",id:"http3_stream_new",level:4},{value:"http3_stream_new_with_priority",id:"http3_stream_new_with_priority",level:4},{value:"http3_stream_close",id:"http3_stream_close",level:4},{value:"http3_send_headers",id:"http3_send_headers",level:4},{value:"http3_send_body",id:"http3_send_body",level:4},{value:"http3_recv_body",id:"http3_recv_body",level:4},{value:"http3_for_each_header",id:"http3_for_each_header",level:4},{value:"http3_stream_read_finished",id:"http3_stream_read_finished",level:4},{value:"HTTP/3 Extensiable priority",id:"http3-extensiable-priority",level:3},{value:"http3_stream_set_priority",id:"http3_stream_set_priority",level:4},{value:"http3_send_priority_update_for_request",id:"http3_send_priority_update_for_request",level:4},{value:"http3_take_priority_update",id:"http3_take_priority_update",level:4},{value:"http3_parse_extensible_priority",id:"http3_parse_extensible_priority",level:4},{value:"Miscellaneous functions",id:"miscellaneous-functions-1",level:2},{value:"http3_methods_t",id:"http3_methods_t",level:4},{value:"http3_context_t",id:"http3_context_t",level:4},{value:"http3_header_t",id:"http3_header_t",level:4},{value:"http3_headers_t",id:"http3_headers_t",level:4},{value:"http3_priority_t",id:"http3_priority_t",level:4}],p={toc:_},c="wrapper";function d(t){let{components:e,...n}=t;return(0,r.kt)(c,(0,a.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"cc-http3-api-reference"},"C/C++ HTTP/3 API Reference"),(0,r.kt)("h2",{id:"preliminaries"},"Preliminaries"),(0,r.kt)("p",null,"The declarations are all in ",(0,r.kt)("inlineCode",{parentName:"p"},"tquic.h"),", so you just need to include it in each source file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"#include <tquic.h>\n")),(0,r.kt)("h2",{id:"common-types"},"Common types"),(0,r.kt)("p",null,"The TQUIC HTTP/3 library defines several types that are commonly used by its public functions."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"http3_config_t")),(0,r.kt)("td",{parentName:"tr",align:null},"The behavior of the HTTP/3 library can be managed through various parameters in ",(0,r.kt)("inlineCode",{parentName:"td"},"http3_config_t"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"http3_conn_t")),(0,r.kt)("td",{parentName:"tr",align:null},"HTTP/3 connection, which can manitain muliple requests simultaneously.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"http3_header_t")),(0,r.kt)("td",{parentName:"tr",align:null},"HTTP/3 header structure.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"http3_headers_t")),(0,r.kt)("td",{parentName:"tr",align:null},"HTTP/3 headers list.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"http3_methods_t")),(0,r.kt)("td",{parentName:"tr",align:null},"The structure lists the callbacks used by the connection to interact with the user code.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"http3_context_t")),(0,r.kt)("td",{parentName:"tr",align:null},"User-provided HTTP/3 context that can be used to associate information during event callbacks.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"http3_priority_t")),(0,r.kt)("td",{parentName:"tr",align:null},"Extensible HTTP/3 priority, as described in ",(0,r.kt)("a",{parentName:"td",href:"https://www.rfc-editor.org/rfc/rfc9218.html"},"RFC9218"),".")))),(0,r.kt)("h2",{id:"configurations"},"Configurations"),(0,r.kt)("h3",{id:"http3-configurations-initialization"},"HTTP/3 configurations initialization"),(0,r.kt)("h4",{id:"http3_config_new"},"http3_config_new"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"struct http3_config_t *http3_config_new(void);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create an instance of ",(0,r.kt)("inlineCode",{parentName:"li"},"http3_config_t")," and initialize it with default values. The caller is responsible for managing the memory and should free it by calling ",(0,r.kt)("inlineCode",{parentName:"li"},"http3_config_free"),".")),(0,r.kt)("h4",{id:"http3_config_free"},"http3_config_free"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"void http3_config_free(struct http3_config_t *config);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Free HTTP/3 configuration.")),(0,r.kt)("h3",{id:"http3-configurations-customization"},"HTTP/3 configurations customization"),(0,r.kt)("h4",{id:"http3_config_set_max_field_section_size"},"http3_config_set_max_field_section_size"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"void http3_config_set_max_field_section_size(struct http3_config_t *config, uint64_t v);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Set the ",(0,r.kt)("inlineCode",{parentName:"li"},"max_field_section_size")," setting parameter in bytes."),(0,r.kt)("li",{parentName:"ul"},"The default value is set to ",(0,r.kt)("inlineCode",{parentName:"li"},"0"),", which means there is no limit on the size of headers received from the peer. The calculation rules for headers size constraints can be found in ",(0,r.kt)("a",{parentName:"li",href:"https://www.rfc-editor.org/rfc/rfc9114.html#name-header-size-constraints"},"RFC9114 Headers Size Constraints"),".")),(0,r.kt)("h2",{id:"http3-connection"},"HTTP/3 Connection"),(0,r.kt)("h3",{id:"instantiation-and-destruction"},"Instantiation and destruction"),(0,r.kt)("h4",{id:"http3_conn_new"},"http3_conn_new"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"struct http3_conn_t *http3_conn_new(struct quic_conn_t *quic_conn, struct http3_config_t *config);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create an HTTP/3 connection. The caller is responsible for the memory of the connection and properly free it by calling ",(0,r.kt)("inlineCode",{parentName:"li"},"http3_conn_free"),".")),(0,r.kt)("h4",{id:"http3_conn_free"},"http3_conn_free"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"void http3_conn_free(struct http3_conn_t *conn);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Free an HTTP/3 connection.")),(0,r.kt)("h3",{id:"event-driven-and-callbacks"},"Event-driven and Callbacks"),(0,r.kt)("h4",{id:"http3_conn_set_events_handler"},"http3_conn_set_events_handler"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"void http3_conn_set_events_handler(struct http3_conn_t *conn,\n                                   const struct http3_methods_t *methods,\n                                   http3_context_t context);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Sets the callback and context for processing HTTP/3 connection events.")),(0,r.kt)("h4",{id:"http3_conn_process_streams"},"http3_conn_process_streams"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"int http3_conn_process_streams(struct http3_conn_t *conn, struct quic_conn_t *quic_conn);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Drives the HTTP/3 connection to process internal events for all maintained streams.")),(0,r.kt)("h3",{id:"http3-callbacks"},"HTTP/3 Callbacks"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"http3_methods_t")," lists the callbacks used by the HTTP/3 connection to interact with the user code."),(0,r.kt)("h4",{id:"on_stream_headers"},"on_stream_headers"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"typedef struct http3_methods_t {\n  void (*on_stream_headers)(void *ctx, uint64_t stream_id, const struct http3_headers_t *headers, bool fin);\n  /* ... */\n} http3_methods_t;\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"on_stream_headers")," is called when request or response headers are received from the peer. In this callback, the upper-layer application can parse the headers using ",(0,r.kt)("inlineCode",{parentName:"li"},"http3_for_each_header"),".")),(0,r.kt)("h4",{id:"on_stream_data"},"on_stream_data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"typedef struct http3_methods_t {\n  void (*on_stream_data)(void *ctx, uint64_t stream_id);\n  /* ... */\n} http3_methods_t;\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"on_stream_data")," is called when DATA frames are received from the peer. Note that this event is edge-triggered.")),(0,r.kt)("h4",{id:"on_stream_finished"},"on_stream_finished"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"typedef struct http3_methods_t {\n  void (*on_stream_finished)(void *ctx, uint64_t stream_id);\n  /* ... */\n} http3_methods_t;\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"on_stream_finished")," is called when all incoming data for a stream has been read.")),(0,r.kt)("h4",{id:"on_stream_reset"},"on_stream_reset"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"typedef struct http3_methods_t {\n  void (*on_stream_reset)(void *ctx, uint64_t stream_id, uint64_t error_code);\n  /* ... */\n} http3_methods_t;\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"on_stream_reset")," is called when a RESET_STREAM frame is received from the peer. This callback is optional.")),(0,r.kt)("h4",{id:"on_stream_priority_update"},"on_stream_priority_update"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"typedef struct http3_methods_t {\n  void (*on_stream_priority_update)(void *ctx, uint64_t stream_id);\n  /* ... */\n} http3_methods_t;\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"on_stream_priority_update")," is called when a PRIORITY_UPDATE frame is received from the peer. This callback is optional, and the upper-layer application can use ",(0,r.kt)("inlineCode",{parentName:"li"},"http3_take_priority_update")," to get the priority update info for the associated stream.")),(0,r.kt)("h4",{id:"on_conn_goaway"},"on_conn_goaway"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"typedef struct http3_methods_t {\n  void (*on_conn_goaway)(void *ctx, uint64_t stream_id);\n  /* ... */\n} http3_methods_t;\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"on_conn_goaway")," is called when a GOAWAY frame is received from the peer. This callback is optional, and after receiving this event, the upper-layer application should not initiate new streams on the connection.")),(0,r.kt)("h3",{id:"miscellaneous-functions"},"Miscellaneous functions"),(0,r.kt)("h4",{id:"http3_for_each_setting"},"http3_for_each_setting"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"int http3_for_each_setting(const struct http3_conn_t *conn, int (*cb)(uint64_t identifier,\n                                                                      uint64_t value,\n                                                                      void *argp), void *argp);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"For each settings parameter, execute the ",(0,r.kt)("inlineCode",{parentName:"li"},"cb")," callback.")),(0,r.kt)("h4",{id:"http3_send_goaway"},"http3_send_goaway"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"int64_t http3_send_goaway(struct http3_conn_t *conn, struct quic_conn_t *quic_conn, uint64_t id);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Send a GOAWAY frame to the peer and disconnect gracefully.")),(0,r.kt)("h2",{id:"http3-request"},"HTTP/3 request"),(0,r.kt)("h3",{id:"request-and-response"},"Request and Response"),(0,r.kt)("h4",{id:"http3_stream_new"},"http3_stream_new"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"int64_t http3_stream_new(struct http3_conn_t *conn, struct quic_conn_t *quic_conn);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create a new HTTP/3 request stream.")),(0,r.kt)("h4",{id:"http3_stream_new_with_priority"},"http3_stream_new_with_priority"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"int64_t http3_stream_new_with_priority(struct http3_conn_t *conn,\n                                       struct quic_conn_t *quic_conn,\n                                       const struct http3_priority_t *priority);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create a new HTTP/3 request stream with a specified priority using the ",(0,r.kt)("inlineCode",{parentName:"li"},"priority")," parameter.")),(0,r.kt)("h4",{id:"http3_stream_close"},"http3_stream_close"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"int http3_stream_close(struct http3_conn_t *conn,\n                       struct quic_conn_t *quic_conn,\n                       uint64_t stream_id);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Close HTTP/3 request stream.")),(0,r.kt)("h4",{id:"http3_send_headers"},"http3_send_headers"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"int http3_send_headers(struct http3_conn_t *conn,\n                       struct quic_conn_t *quic_conn,\n                       uint64_t stream_id,\n                       const struct http3_header_t *headers,\n                       size_t headers_len,\n                       bool fin);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Send HTTP/3 request or response headers, where the ",(0,r.kt)("inlineCode",{parentName:"li"},"fin")," indicates whether there is more data to be sent.")),(0,r.kt)("h4",{id:"http3_send_body"},"http3_send_body"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"ssize_t http3_send_body(struct http3_conn_t *conn,\n                        struct quic_conn_t *quic_conn,\n                        uint64_t stream_id,\n                        const uint8_t *body,\n                        size_t body_len,\n                        bool fin);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Send body for an HTTP/3 request or response, where the ",(0,r.kt)("inlineCode",{parentName:"li"},"fin")," indicates whether there is more data to be sent.")),(0,r.kt)("h4",{id:"http3_recv_body"},"http3_recv_body"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"ssize_t http3_recv_body(struct http3_conn_t *conn,\n                        struct quic_conn_t *quic_conn,\n                        uint64_t stream_id,\n                        uint8_t *out,\n                        size_t out_len);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Receive body for an HTTP/3 request or response.")),(0,r.kt)("h4",{id:"http3_for_each_header"},"http3_for_each_header"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"int http3_for_each_header(const struct http3_headers_t *headers, int (*cb)(const uint8_t *name,\n                                                                           size_t name_len,\n                                                                           const uint8_t *value,\n                                                                           size_t value_len,\n                                                                           void *argp), void *argp);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"For each header, execute the ",(0,r.kt)("inlineCode",{parentName:"li"},"cb")," callback.")),(0,r.kt)("h4",{id:"http3_stream_read_finished"},"http3_stream_read_finished"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"bool http3_stream_read_finished(struct quic_conn_t *conn, uint64_t stream_id);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Check if all incoming data has been fully read.")),(0,r.kt)("h3",{id:"http3-extensiable-priority"},"HTTP/3 Extensiable priority"),(0,r.kt)("h4",{id:"http3_stream_set_priority"},"http3_stream_set_priority"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"int http3_stream_set_priority(struct http3_conn_t *conn,\n                              struct quic_conn_t *quic_conn,\n                              uint64_t stream_id,\n                              const struct http3_priority_t *priority);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Set priority for an HTTP/3 stream.")),(0,r.kt)("h4",{id:"http3_send_priority_update_for_request"},"http3_send_priority_update_for_request"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"int http3_send_priority_update_for_request(struct http3_conn_t *conn,\n                                           struct quic_conn_t *quic_conn,\n                                           uint64_t stream_id,\n                                           const struct http3_priority_t *priority);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"HTTP/3 client sends a PRIORITY_UPDATE frame for the given request stream to the server.")),(0,r.kt)("h4",{id:"http3_take_priority_update"},"http3_take_priority_update"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"int http3_take_priority_update(struct http3_conn_t *conn,\n                               uint64_t prioritized_element_id,\n                               int (*cb)(const uint8_t *priority_field_value,\n                                         size_t priority_field_value_len,\n                                         void *argp),\n                               void *argp);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When the application got a priority update event, it can use this api to get the priority_field value for the ",(0,r.kt)("inlineCode",{parentName:"li"},"prioritized_element_id")," stream.")),(0,r.kt)("h4",{id:"http3_parse_extensible_priority"},"http3_parse_extensible_priority"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"int http3_parse_extensible_priority(const uint8_t *priority,\n                                    size_t priority_len,\n                                    struct http3_priority_t *parsed);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The application uses this api to parse the structured encoded priority_field into the ",(0,r.kt)("inlineCode",{parentName:"li"},"http3_priority_t")," structure.")),(0,r.kt)("h2",{id:"miscellaneous-functions-1"},"Miscellaneous functions"),(0,r.kt)("h4",{id:"http3_methods_t"},"http3_methods_t"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"typedef struct http3_methods_t {\n  /**\n   * Called when the stream got headers.\n   */\n  void (*on_stream_headers)(void *ctx,\n                            uint64_t stream_id,\n                            const struct http3_headers_t *headers,\n                            bool fin);\n  /**\n   * Called when the stream has buffered data to read.\n   */\n  void (*on_stream_data)(void *ctx, uint64_t stream_id);\n  /**\n   * Called when the stream is finished.\n   */\n  void (*on_stream_finished)(void *ctx, uint64_t stream_id);\n  /**\n   * Called when the stream receives a RESET_STREAM frame from the peer.\n   */\n  void (*on_stream_reset)(void *ctx, uint64_t stream_id, uint64_t error_code);\n  /**\n   * Called when the stream priority is updated.\n   */\n  void (*on_stream_priority_update)(void *ctx, uint64_t stream_id);\n  /**\n   * Called when the connection receives a GOAWAY frame from the peer.\n   */\n  void (*on_conn_goaway)(void *ctx, uint64_t stream_id);\n} http3_methods_t;\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"HTTP/3 callbacks.")),(0,r.kt)("h4",{id:"http3_context_t"},"http3_context_t"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"typedef void *http3_context_t;\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"HTTP/3 context.")),(0,r.kt)("h4",{id:"http3_header_t"},"http3_header_t"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"typedef struct http3_header_t {\n  uint8_t *name;\n  uintptr_t name_len;\n  uint8_t *value;\n  uintptr_t value_len;\n} http3_header_t;\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"HTTP/3 header structure.")),(0,r.kt)("h4",{id:"http3_headers_t"},"http3_headers_t"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"typedef struct http3_headers_t http3_headers_t;\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"HTTP/3 headers list.")),(0,r.kt)("h4",{id:"http3_priority_t"},"http3_priority_t"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"typedef struct http3_priority_t {\n  uint8_t urgency;\n  bool incremental;\n} http3_priority_t;\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"HTTP/3 stream priority.")))}d.isMDXComponent=!0}}]);
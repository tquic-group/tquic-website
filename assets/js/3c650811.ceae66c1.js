"use strict";(self.webpackChunktquic_website=self.webpackChunktquic_website||[]).push([[4078],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},c=Object.keys(e);for(i=0;i<c.length;i++)n=c[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(i=0;i<c.length;i++)n=c[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=i.createContext({}),r=function(e){var t=i.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=r(e.components);return i.createElement(o.Provider,{value:t},e.children)},s="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,c=e.originalType,o=e.parentName,u=_(e,["components","mdxType","originalType","parentName"]),s=r(n),p=a,m=s["".concat(o,".").concat(p)]||s[p]||d[p]||c;return n?i.createElement(m,l(l({ref:t},u),{},{components:n})):i.createElement(m,l({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var c=n.length,l=new Array(c);l[0]=p;var _={};for(var o in t)hasOwnProperty.call(t,o)&&(_[o]=t[o]);_.originalType=e,_[s]="string"==typeof e?e:a,l[1]=_;for(var r=2;r<c;r++)l[r]=n[r];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6063:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>c,metadata:()=>_,toc:()=>r});var i=n(7462),a=(n(7294),n(3905));const c={title:"C/C++ QUIC API Reference",sidebar_position:3},l="C++ QUIC API Reference",_={unversionedId:"api_reference/c_quic",id:"api_reference/c_quic",title:"C/C++ QUIC API Reference",description:"Preliminaries",source:"@site/docs/api_reference/c_quic.md",sourceDirName:"api_reference",slug:"/api_reference/c_quic",permalink:"/docs/api_reference/c_quic",draft:!1,editUrl:"https://github.com/tencent/tquic-website/tree/main/packages/create-docusaurus/templates/shared/docs/api_reference/c_quic.md",tags:[],version:"current",lastUpdatedBy:"Sijie Yang",lastUpdatedAt:1702640369,formattedLastUpdatedAt:"Dec 15, 2023",sidebarPosition:3,frontMatter:{title:"C/C++ QUIC API Reference",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Rust HTTP/3 API Reference",permalink:"/docs/api_reference/rust_h3"},next:{title:"C/C++ HTTP/3 API Reference",permalink:"/docs/api_reference/c_h3"}},o={},r=[{value:"Preliminaries",id:"preliminaries",level:2},{value:"Common types",id:"common-types",level:2},{value:"Configurations",id:"configurations",level:2},{value:"QUIC configurations initialization",id:"quic-configurations-initialization",level:3},{value:"quic_config_new",id:"quic_config_new",level:4},{value:"quic_config_free",id:"quic_config_free",level:4},{value:"QUIC configurations customization",id:"quic-configurations-customization",level:3},{value:"quic_config_set_max_idle_timeout",id:"quic_config_set_max_idle_timeout",level:4},{value:"quic_config_set_max_udp_payload_size",id:"quic_config_set_max_udp_payload_size",level:4},{value:"quic_config_set_initial_max_data",id:"quic_config_set_initial_max_data",level:4},{value:"quic_config_set_initial_max_stream_data_bidi_local",id:"quic_config_set_initial_max_stream_data_bidi_local",level:4},{value:"quic_config_set_initial_max_stream_data_bidi_remote",id:"quic_config_set_initial_max_stream_data_bidi_remote",level:4},{value:"quic_config_set_initial_max_stream_data_uni",id:"quic_config_set_initial_max_stream_data_uni",level:4},{value:"quic_config_set_initial_max_streams_bidi",id:"quic_config_set_initial_max_streams_bidi",level:4},{value:"quic_config_set_initial_max_streams_uni",id:"quic_config_set_initial_max_streams_uni",level:4},{value:"quic_config_set_ack_delay_exponent",id:"quic_config_set_ack_delay_exponent",level:4},{value:"quic_config_set_max_ack_delay",id:"quic_config_set_max_ack_delay",level:4},{value:"quic_config_set_congestion_control_algorithm",id:"quic_config_set_congestion_control_algorithm",level:4},{value:"quic_config_set_initial_congestion_window",id:"quic_config_set_initial_congestion_window",level:4},{value:"quic_config_set_min_congestion_window",id:"quic_config_set_min_congestion_window",level:4},{value:"quic_config_set_initial_rtt",id:"quic_config_set_initial_rtt",level:4},{value:"quic_config_set_active_connection_id_limit",id:"quic_config_set_active_connection_id_limit",level:4},{value:"quic_config_set_max_connection_window",id:"quic_config_set_max_connection_window",level:4},{value:"quic_config_set_max_stream_window",id:"quic_config_set_max_stream_window",level:4},{value:"quic_config_set_max_concurrent_conns",id:"quic_config_set_max_concurrent_conns",level:4},{value:"quic_config_set_reset_token_key",id:"quic_config_set_reset_token_key",level:4},{value:"quic_config_set_address_token_lifetime",id:"quic_config_set_address_token_lifetime",level:4},{value:"quic_config_set_address_token_key",id:"quic_config_set_address_token_key",level:4},{value:"quic_config_enable_retry",id:"quic_config_enable_retry",level:4},{value:"quic_config_set_cid_len",id:"quic_config_set_cid_len",level:4},{value:"quic_config_set_send_batch_size",id:"quic_config_set_send_batch_size",level:4},{value:"quic_config_set_tls_selector",id:"quic_config_set_tls_selector",level:4},{value:"Endpoint",id:"endpoint",level:2},{value:"Instantiation and destruction",id:"instantiation-and-destruction",level:3},{value:"quic_endpoint_new",id:"quic_endpoint_new",level:4},{value:"quic_endpoint_free",id:"quic_endpoint_free",level:4},{value:"Receiving Packets",id:"receiving-packets",level:3},{value:"quic_endpoint_recv",id:"quic_endpoint_recv",level:4},{value:"Sending Packets",id:"sending-packets",level:3},{value:"on_packets_send",id:"on_packets_send",level:4},{value:"Timeout events",id:"timeout-events",level:3},{value:"quic_endpoint_timeout",id:"quic_endpoint_timeout",level:4},{value:"quic_endpoint_on_timeout",id:"quic_endpoint_on_timeout",level:4},{value:"Internal events",id:"internal-events",level:3},{value:"quic_endpoint_process_connections",id:"quic_endpoint_process_connections",level:4},{value:"Transport Callbacks",id:"transport-callbacks",level:3},{value:"on_conn_created",id:"on_conn_created",level:4},{value:"on_conn_established",id:"on_conn_established",level:4},{value:"on_conn_closed",id:"on_conn_closed",level:4},{value:"on_stream_created",id:"on_stream_created",level:4},{value:"on_stream_readable",id:"on_stream_readable",level:4},{value:"on_stream_writable",id:"on_stream_writable",level:4},{value:"on_stream_closed",id:"on_stream_closed",level:4},{value:"on_new_token",id:"on_new_token",level:4},{value:"Miscellaneous functions",id:"miscellaneous-functions",level:3},{value:"quic_endpoint_exist_connection",id:"quic_endpoint_exist_connection",level:4},{value:"quic_endpoint_get_connection",id:"quic_endpoint_get_connection",level:4},{value:"quic_endpoint_close",id:"quic_endpoint_close",level:4},{value:"Connection",id:"connection",level:2},{value:"Create connections",id:"create-connections",level:3},{value:"quic_endpoint_connect",id:"quic_endpoint_connect",level:4},{value:"Closing connections",id:"closing-connections",level:3},{value:"quic_conn_close",id:"quic_conn_close",level:4},{value:"Connection Context",id:"connection-context",level:3},{value:"quic_conn_set_context",id:"quic_conn_set_context",level:4},{value:"quic_conn_context",id:"quic_conn_context",level:4},{value:"Connection logging and tracing",id:"connection-logging-and-tracing",level:3},{value:"quic_conn_set_keylog_fd",id:"quic_conn_set_keylog_fd",level:4},{value:"quic_conn_set_qlog_fd",id:"quic_conn_set_qlog_fd",level:4},{value:"quic_conn_trace_id",id:"quic_conn_trace_id",level:4},{value:"Miscellaneous functions",id:"miscellaneous-functions-1",level:3},{value:"quic_conn_index",id:"quic_conn_index",level:4},{value:"quic_conn_is_server",id:"quic_conn_is_server",level:4},{value:"quic_conn_is_established",id:"quic_conn_is_established",level:4},{value:"quic_conn_is_resumed",id:"quic_conn_is_resumed",level:4},{value:"quic_conn_is_in_early_data",id:"quic_conn_is_in_early_data",level:4},{value:"quic_conn_is_multipath",id:"quic_conn_is_multipath",level:4},{value:"quic_conn_application_proto",id:"quic_conn_application_proto",level:4},{value:"quic_conn_server_name",id:"quic_conn_server_name",level:4},{value:"quic_conn_session",id:"quic_conn_session",level:4},{value:"quic_conn_is_draining",id:"quic_conn_is_draining",level:4},{value:"quic_conn_is_closed",id:"quic_conn_is_closed",level:4},{value:"quic_conn_is_idle_timeout",id:"quic_conn_is_idle_timeout",level:4},{value:"quic_conn_peer_error",id:"quic_conn_peer_error",level:4},{value:"quic_conn_local_error",id:"quic_conn_local_error",level:4},{value:"Stream",id:"stream",level:2},{value:"Create streams",id:"create-streams",level:3},{value:"quic_stream_new",id:"quic_stream_new",level:4},{value:"Stream priorities",id:"stream-priorities",level:3},{value:"quic_stream_set_priority",id:"quic_stream_set_priority",level:4},{value:"Stream events",id:"stream-events",level:3},{value:"quic_stream_wantwrite",id:"quic_stream_wantwrite",level:4},{value:"quic_stream_wantread",id:"quic_stream_wantread",level:4},{value:"Reading from streams",id:"reading-from-streams",level:3},{value:"quic_stream_read",id:"quic_stream_read",level:4},{value:"Writing to streams",id:"writing-to-streams",level:3},{value:"quic_stream_write",id:"quic_stream_write",level:4},{value:"Closing streams",id:"closing-streams",level:3},{value:"quic_stream_shutdown",id:"quic_stream_shutdown",level:4},{value:"Stream context",id:"stream-context",level:3},{value:"quic_stream_set_context",id:"quic_stream_set_context",level:4},{value:"quic_stream_context",id:"quic_stream_context",level:4},{value:"Miscellaneous functions",id:"miscellaneous-functions-2",level:3},{value:"quic_stream_capacity",id:"quic_stream_capacity",level:4},{value:"quic_stream_finished",id:"quic_stream_finished",level:4},{value:"Path",id:"path",level:2},{value:"Create paths",id:"create-paths",level:3},{value:"quic_conn_add_path",id:"quic_conn_add_path",level:4},{value:"Miscellaneous functions",id:"miscellaneous-functions-3",level:3},{value:"quic_conn_active_path",id:"quic_conn_active_path",level:4},{value:"quic_path_address_iter_t",id:"quic_path_address_iter_t",level:4},{value:"quic_conn_path_iter_next",id:"quic_conn_path_iter_next",level:4},{value:"quic_conn_path_iter_free",id:"quic_conn_path_iter_free",level:4},{value:"Miscellaneous types",id:"miscellaneous-types",level:2},{value:"quic_transport_handler_t",id:"quic_transport_handler_t",level:4},{value:"quic_packet_out_spec_t",id:"quic_packet_out_spec_t",level:4},{value:"quic_shutdown",id:"quic_shutdown",level:4},{value:"quic_path_address_iter_t",id:"quic_path_address_iter_t-1",level:4},{value:"quic_congestion_control_algorithm",id:"quic_congestion_control_algorithm",level:4}],u={toc:r},s="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(s,(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"c-quic-api-reference"},"C++ QUIC API Reference"),(0,a.kt)("h2",{id:"preliminaries"},"Preliminaries"),(0,a.kt)("p",null,"The declarations are all in ",(0,a.kt)("inlineCode",{parentName:"p"},"tquic.h"),", so you just need to include it in each source file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"#include <tquic.h>\n")),(0,a.kt)("h2",{id:"common-types"},"Common types"),(0,a.kt)("p",null,"The TQUIC library defines several types that are commonly used by its public functions."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Types"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"quic_config_t")),(0,a.kt)("td",{parentName:"tr",align:null},"The behavior of the library can be managed through various settings specified in the ",(0,a.kt)("inlineCode",{parentName:"td"},"quic_config_t"),".")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"quic_endpoint_t")),(0,a.kt)("td",{parentName:"tr",align:null},"Endpoint is an entity that can participate in a QUIC connection by generating, receiving, and processing QUIC packets. Endpoint may maintain one or more QUIC connections.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"quic_connection_t")),(0,a.kt)("td",{parentName:"tr",align:null},"QUIC connection.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"quic_transport_handler_t")),(0,a.kt)("td",{parentName:"tr",align:null},"The context provided by the user's code.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"quic_transport_methods_t")),(0,a.kt)("td",{parentName:"tr",align:null},"The structure lists the callbacks used by the endpoint for interaction with the user code.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"quic_packet_out_spec")),(0,a.kt)("td",{parentName:"tr",align:null},"Data and metadata of a outbound packet.")))),(0,a.kt)("h2",{id:"configurations"},"Configurations"),(0,a.kt)("h3",{id:"quic-configurations-initialization"},"QUIC configurations initialization"),(0,a.kt)("h4",{id:"quic_config_new"},"quic_config_new"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"struct quic_config_t *quic_config_new(void);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Create an instance of ",(0,a.kt)("inlineCode",{parentName:"li"},"quic_config_t")," and initialize it with default configuration. The caller is responsible for the memory of the Config and should properly\ndestroy it by calling ",(0,a.kt)("inlineCode",{parentName:"li"},"quic_config_free"),".")),(0,a.kt)("h4",{id:"quic_config_free"},"quic_config_free"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void quic_config_free(struct quic_config_t *config);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Destroy QUIC configuration")),(0,a.kt)("h3",{id:"quic-configurations-customization"},"QUIC configurations customization"),(0,a.kt)("h4",{id:"quic_config_set_max_idle_timeout"},"quic_config_set_max_idle_timeout"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void quic_config_set_max_idle_timeout(struct quic_config_t *config,\n                                      uint64_t v);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set the ",(0,a.kt)("inlineCode",{parentName:"li"},"max_idle_timeout")," transport parameter in milliseconds."),(0,a.kt)("li",{parentName:"ul"},"The default value is set to ",(0,a.kt)("inlineCode",{parentName:"li"},"0"),", which means that idle timeout is disabled by default.")),(0,a.kt)("h4",{id:"quic_config_set_max_udp_payload_size"},"quic_config_set_max_udp_payload_size"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void quic_config_set_max_udp_payload_size(struct quic_config_t *config,\n                                          uint16_t v);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set the ",(0,a.kt)("inlineCode",{parentName:"li"},"max_udp_payload_size")," transport parameter in bytes. It limits\nthe size of UDP payloads that the endpoint is willing to receive."),(0,a.kt)("li",{parentName:"ul"},"The default value is ",(0,a.kt)("inlineCode",{parentName:"li"},"65527"),".")),(0,a.kt)("h4",{id:"quic_config_set_initial_max_data"},"quic_config_set_initial_max_data"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void quic_config_set_initial_max_data(struct quic_config_t *config,\n                                      uint64_t v);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set the ",(0,a.kt)("inlineCode",{parentName:"li"},"initial_max_data")," transport parameter. It means the initial\nvalue for the maximum amount of data that can be sent on the connection."),(0,a.kt)("li",{parentName:"ul"},"The default value is ",(0,a.kt)("inlineCode",{parentName:"li"},"10485760")," (10 MB).")),(0,a.kt)("h4",{id:"quic_config_set_initial_max_stream_data_bidi_local"},"quic_config_set_initial_max_stream_data_bidi_local"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void quic_config_set_initial_max_stream_data_bidi_local(struct quic_config_t *config,\n                                                        uint64_t v);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set the ",(0,a.kt)("inlineCode",{parentName:"li"},"initial_max_stream_data_bidi_local")," transport parameter."),(0,a.kt)("li",{parentName:"ul"},"The default value is ",(0,a.kt)("inlineCode",{parentName:"li"},"5242880")," (5 MB).")),(0,a.kt)("h4",{id:"quic_config_set_initial_max_stream_data_bidi_remote"},"quic_config_set_initial_max_stream_data_bidi_remote"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void quic_config_set_initial_max_stream_data_bidi_remote(struct quic_config_t *config,\n                                                         uint64_t v);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set the ",(0,a.kt)("inlineCode",{parentName:"li"},"initial_max_stream_data_bidi_remote")," transport parameter."),(0,a.kt)("li",{parentName:"ul"},"The default value is ",(0,a.kt)("inlineCode",{parentName:"li"},"2097152")," (2 MB).")),(0,a.kt)("h4",{id:"quic_config_set_initial_max_stream_data_uni"},"quic_config_set_initial_max_stream_data_uni"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void quic_config_set_initial_max_stream_data_uni(struct quic_config_t *config,\n                                                 uint64_t v);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set the ",(0,a.kt)("inlineCode",{parentName:"li"},"initial_max_stream_data_uni")," transport parameter."),(0,a.kt)("li",{parentName:"ul"},"The default value is ",(0,a.kt)("inlineCode",{parentName:"li"},"1048576")," (1 MB).")),(0,a.kt)("h4",{id:"quic_config_set_initial_max_streams_bidi"},"quic_config_set_initial_max_streams_bidi"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void quic_config_set_initial_max_streams_bidi(struct quic_config_t *config,\n                                              uint64_t v);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set the ",(0,a.kt)("inlineCode",{parentName:"li"},"initial_max_streams_bidi")," transport parameter."),(0,a.kt)("li",{parentName:"ul"},"The default value is ",(0,a.kt)("inlineCode",{parentName:"li"},"200"),".")),(0,a.kt)("h4",{id:"quic_config_set_initial_max_streams_uni"},"quic_config_set_initial_max_streams_uni"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void quic_config_set_initial_max_streams_uni(struct quic_config_t *config,\n                                             uint64_t v);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set the ",(0,a.kt)("inlineCode",{parentName:"li"},"initial_max_streams_uni")," transport parameter."),(0,a.kt)("li",{parentName:"ul"},"The default value is ",(0,a.kt)("inlineCode",{parentName:"li"},"100"),".")),(0,a.kt)("h4",{id:"quic_config_set_ack_delay_exponent"},"quic_config_set_ack_delay_exponent"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void quic_config_set_ack_delay_exponent(struct quic_config_t *config,\n                                        uint64_t v);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set the ",(0,a.kt)("inlineCode",{parentName:"li"},"ack_delay_exponent")," transport parameter."),(0,a.kt)("li",{parentName:"ul"},"The default value is ",(0,a.kt)("inlineCode",{parentName:"li"},"3"),".")),(0,a.kt)("h4",{id:"quic_config_set_max_ack_delay"},"quic_config_set_max_ack_delay"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void quic_config_set_max_ack_delay(struct quic_config_t *config,\n                                   uint64_t v);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set the ",(0,a.kt)("inlineCode",{parentName:"li"},"max_ack_delay")," transport parameter."),(0,a.kt)("li",{parentName:"ul"},"The default value is ",(0,a.kt)("inlineCode",{parentName:"li"},"25"),".")),(0,a.kt)("h4",{id:"quic_config_set_congestion_control_algorithm"},"quic_config_set_congestion_control_algorithm"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void quic_config_set_congestion_control_algorithm(struct quic_config_t *config,\n                                                  enum quic_congestion_control_algorithm v);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set congestion control algorithm that the connection would use."),(0,a.kt)("li",{parentName:"ul"},"The default value is ",(0,a.kt)("inlineCode",{parentName:"li"},"QUIC_CONGESTION_CONTROL_ALGORITHM_CUBIC"),".")),(0,a.kt)("h4",{id:"quic_config_set_initial_congestion_window"},"quic_config_set_initial_congestion_window"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void quic_config_set_initial_congestion_window(struct quic_config_t *config, uint64_t v);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set the initial congestion window in packets."),(0,a.kt)("li",{parentName:"ul"},"The default value is 10.")),(0,a.kt)("h4",{id:"quic_config_set_min_congestion_window"},"quic_config_set_min_congestion_window"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void quic_config_set_min_congestion_window(struct quic_config_t *config, uint64_t v);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set the minimal congestion window in packets."),(0,a.kt)("li",{parentName:"ul"},"The default value is 2.")),(0,a.kt)("h4",{id:"quic_config_set_initial_rtt"},"quic_config_set_initial_rtt"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void quic_config_set_initial_rtt(struct quic_config_t *config, uint64_t v);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set the initial RTT in milliseconds."),(0,a.kt)("li",{parentName:"ul"},"The default value is 333ms.")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"The configuration should be changed with caution. Setting a value less than the default\nwill cause retransmission of handshake packets to be more aggressive.")),(0,a.kt)("h4",{id:"quic_config_set_active_connection_id_limit"},"quic_config_set_active_connection_id_limit"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void quic_config_set_active_connection_id_limit(struct quic_config_t *config,\n                                                uint64_t v);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set the ",(0,a.kt)("inlineCode",{parentName:"li"},"active_connection_id_limit")," transport parameter."),(0,a.kt)("li",{parentName:"ul"},"The default value is ",(0,a.kt)("inlineCode",{parentName:"li"},"2"),". Lower values will be ignored.")),(0,a.kt)("h4",{id:"quic_config_set_max_connection_window"},"quic_config_set_max_connection_window"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void quic_config_set_max_connection_window(struct quic_config_t *config,\n                                           uint64_t v);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set the maximum size of the connection flow control window."),(0,a.kt)("li",{parentName:"ul"},"The default value is ",(0,a.kt)("inlineCode",{parentName:"li"},"25165824")," (24 MB).")),(0,a.kt)("h4",{id:"quic_config_set_max_stream_window"},"quic_config_set_max_stream_window"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void quic_config_set_max_stream_window(struct quic_config_t *config,\n                                       uint64_t v);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set the maximum size of the stream flow control window."),(0,a.kt)("li",{parentName:"ul"},"The default value is ",(0,a.kt)("inlineCode",{parentName:"li"},"16777216")," (16MB).")),(0,a.kt)("h4",{id:"quic_config_set_max_concurrent_conns"},"quic_config_set_max_concurrent_conns"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void quic_config_set_max_concurrent_conns(struct quic_config_t *config,\n                                          uint32_t v);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set the Maximum number of concurrent connections."),(0,a.kt)("li",{parentName:"ul"},"The default value is ",(0,a.kt)("inlineCode",{parentName:"li"},"1000000"))),(0,a.kt)("h4",{id:"quic_config_set_reset_token_key"},"quic_config_set_reset_token_key"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"int quic_config_set_reset_token_key(struct quic_config_t *config,\n                                    const uint8_t *token_key,\n                                    size_t token_key_len);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set the key for reset token generation. The ",(0,a.kt)("inlineCode",{parentName:"li"},"token_key_len")," should be not less than 64.")),(0,a.kt)("h4",{id:"quic_config_set_address_token_lifetime"},"quic_config_set_address_token_lifetime"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void quic_config_set_address_token_lifetime(struct quic_config_t *config,\n                                            uint64_t seconds);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set the lifetime in seconds of address token."),(0,a.kt)("li",{parentName:"ul"},"The default value is ",(0,a.kt)("inlineCode",{parentName:"li"},"86400")," (1 Day)")),(0,a.kt)("h4",{id:"quic_config_set_address_token_key"},"quic_config_set_address_token_key"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"int quic_config_set_address_token_key(struct quic_config_t *config,\n                                      const uint8_t *token_keys,\n                                      size_t token_keys_len);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set the key for address token generation.\nThe ",(0,a.kt)("inlineCode",{parentName:"li"},"token_key_len")," should be a multiple of 16.")),(0,a.kt)("h4",{id:"quic_config_enable_retry"},"quic_config_enable_retry"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void quic_config_enable_retry(struct quic_config_t *config,\n                              bool enabled);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set whether stateless retry is allowed."),(0,a.kt)("li",{parentName:"ul"},"Default is not allowed.")),(0,a.kt)("h4",{id:"quic_config_set_cid_len"},"quic_config_set_cid_len"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void quic_config_set_cid_len(struct quic_config_t *config,\n                             uint8_t v);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set the length of source cid. The length should not be greater than 20."),(0,a.kt)("li",{parentName:"ul"},"The default value is ",(0,a.kt)("inlineCode",{parentName:"li"},"8"),".")),(0,a.kt)("h4",{id:"quic_config_set_send_batch_size"},"quic_config_set_send_batch_size"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void quic_config_set_send_batch_size(struct quic_config_t *config,\n                                     uint16_t v);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set the batch size for sending packets."),(0,a.kt)("li",{parentName:"ul"},"The default value is ",(0,a.kt)("inlineCode",{parentName:"li"},"64"),".")),(0,a.kt)("h4",{id:"quic_config_set_tls_selector"},"quic_config_set_tls_selector"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void quic_config_set_tls_selector(struct quic_config_t *config,\n                                  const struct quic_tls_config_select_methods_t *methods,\n                                  quic_tls_config_select_context_t context);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set TLS config selector.")),(0,a.kt)("h2",{id:"endpoint"},"Endpoint"),(0,a.kt)("h3",{id:"instantiation-and-destruction"},"Instantiation and destruction"),(0,a.kt)("h4",{id:"quic_endpoint_new"},"quic_endpoint_new"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"struct quic_endpoint_t *quic_endpoint_new(struct quic_config_t *config,\n                                          bool is_server,\n                                          const struct quic_transport_methods_t *handler_methods,\n                                          quic_transport_context_t handler_ctx,\n                                          const struct quic_packet_send_methods_t *sender_methods,\n                                          quic_packet_send_context_t sender_ctx);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Create a QUIC endpoint. The caller is responsible for the memory of the Endpoint and properly destroy it by calling ",(0,a.kt)("inlineCode",{parentName:"li"},"quic_endpoint_free"),".")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"The endpoint doesn't own the underlying resources provided by the C caller. It is\nthe responsibility of the caller to ensure that these resources outlive the\nendpoint and release them correctly.")),(0,a.kt)("h4",{id:"quic_endpoint_free"},"quic_endpoint_free"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void quic_endpoint_free(struct quic_endpoint_t *endpoint);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Destroy a QUIC endpoint.")),(0,a.kt)("h3",{id:"receiving-packets"},"Receiving Packets"),(0,a.kt)("h4",{id:"quic_endpoint_recv"},"quic_endpoint_recv"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"int quic_endpoint_recv(struct quic_endpoint_t *endpoint,\n                       uint8_t *buf,\n                       size_t buf_len,\n                       const struct quic_packet_info_t *info);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Incoming UDP datagrams are supplied to the endpoint using ",(0,a.kt)("inlineCode",{parentName:"li"},"quic_endpoint_recv()"),".\nThe endpoint may find an existing connection for the packet and deliver it to the connection, create a new connection,\nor respond with a version negotiation packet or stateless reset packet.")),(0,a.kt)("h3",{id:"sending-packets"},"Sending Packets"),(0,a.kt)("h4",{id:"on_packets_send"},"on_packets_send"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"typedef struct quic_packet_send_methods_t {\n  int (*on_packets_send)(void *psctx, \n                         struct quic_packet_out_spec_t *pkts,\n                         unsigned int count);\n} quic_packet_send_methods_t;\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The user specifies a mandatory callback, ",(0,a.kt)("inlineCode",{parentName:"p"},"on_packets_send"),", in the ",(0,a.kt)("inlineCode",{parentName:"p"},"quic_packet_send_methods_t")," structure that\nthe endpoint utilizes for sending packets.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The callback is called when the connection is sending packets out.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"On success, it returns the number of packets sent. If this is less than ",(0,a.kt)("inlineCode",{parentName:"p"},"count"),",\nthe connection will retry with a further ",(0,a.kt)("inlineCode",{parentName:"p"},"on_packets_send()")," call to send the\nremaining packets. "))),(0,a.kt)("h3",{id:"timeout-events"},"Timeout events"),(0,a.kt)("h4",{id:"quic_endpoint_timeout"},"quic_endpoint_timeout"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"uint64_t quic_endpoint_timeout(const struct quic_endpoint_t *endpoint);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Return the amount of time in milliseconds until the next timeout event.")),(0,a.kt)("h4",{id:"quic_endpoint_on_timeout"},"quic_endpoint_on_timeout"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void quic_endpoint_on_timeout(struct quic_endpoint_t *endpoint);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Process timeout events on the endpoint.")),(0,a.kt)("h3",{id:"internal-events"},"Internal events"),(0,a.kt)("h4",{id:"quic_endpoint_process_connections"},"quic_endpoint_process_connections"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"int quic_endpoint_process_connections(struct quic_endpoint_t *endpoint);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Process internal events of all tickable connections.")),(0,a.kt)("h3",{id:"transport-callbacks"},"Transport Callbacks"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"quic_transport_methods_t")," lists the callbacks used by the endpoint to communicate with the user code."),(0,a.kt)("h4",{id:"on_conn_created"},"on_conn_created"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"typedef struct quic_transport_methods_t {\n  void (*on_conn_created)(void *tctx, \n                          struct quic_conn_t *conn);\n  /* ... */\n} quic_transport_methods_t;\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"on_conn_created")," is called when a new connection has been created. This callback is called\nas soon as connection object is created inside the endpoint, but\nbefore the handshake is done. This callback is optional.")),(0,a.kt)("h4",{id:"on_conn_established"},"on_conn_established"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"typedef struct quic_transport_methods_t {\n  void (*on_conn_established)(void *tctx,\n                              struct quic_conn_t *conn);\n  /* ... */\n} quic_transport_methods_t;\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"on_conn_established")," is called when the handshake is completed. This callback is optional.")),(0,a.kt)("h4",{id:"on_conn_closed"},"on_conn_closed"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"typedef struct quic_transport_methods_t {\n  void (*on_conn_closed)(void *tctx,\n                         struct quic_conn_t *conn);\n  /* ... */\n} quic_transport_methods_t;\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"on_conn_closed")," is called when the connection is closed. The connection is no longer\naccessible after this callback returns. It is a good time to clean up\nthe connection context. This callback is optional.")),(0,a.kt)("h4",{id:"on_stream_created"},"on_stream_created"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"typedef struct quic_transport_methods_t {\n  void (*on_stream_created)(void *tctx,\n                            struct quic_conn_t *conn,\n                            uint64_t stream_id);\n  /* ... */\n} quic_transport_methods_t;\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"on_stream_created")," is called when the stream is created. This callback is optional.")),(0,a.kt)("h4",{id:"on_stream_readable"},"on_stream_readable"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"typedef struct quic_transport_methods_t {\n  void (*on_stream_readable)(void *tctx,\n                             struct quic_conn_t *conn,\n                             uint64_t stream_id);\n  /* ... */\n} quic_transport_methods_t;\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"on_stream_readable")," is called when the stream is readable. This callback is called when either\nthere are bytes to be read or an error is ready to be collected. This\ncallback is optional.")),(0,a.kt)("h4",{id:"on_stream_writable"},"on_stream_writable"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"typedef struct quic_transport_methods_t {\n  void (*on_stream_writable)(void *tctx,\n                             struct quic_conn_t *conn,\n                             uint64_t stream_id);\n  /* ... */\n} quic_transport_methods_t;\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"on_stream_writable")," is called when the stream is writable. This callback is optional.")),(0,a.kt)("h4",{id:"on_stream_closed"},"on_stream_closed"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"typedef struct quic_transport_methods_t {\n  void (*on_conn_closed)(void *tctx,\n                         struct quic_conn_t *conn);\n  /* ... */\n} quic_transport_methods_t;\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"on_stream_closed")," is called when the stream is closed. The stream is no longer accessible\nafter this callback returns. It is a good time to clean up the stream\ncontext. This callback is optional.")),(0,a.kt)("h4",{id:"on_new_token"},"on_new_token"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"typedef struct quic_transport_methods_t {\n  void (*on_new_token)(void *tctx,\n                       struct quic_conn_t *conn,\n                       const uint8_t *token,\n                       size_t token_len);\n  /* ... */\n} quic_transport_methods_t;\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"on_new_token")," is called when client receives a token in NEW_TOKEN frame. This callback\nis optional.")),(0,a.kt)("h3",{id:"miscellaneous-functions"},"Miscellaneous functions"),(0,a.kt)("h4",{id:"quic_endpoint_exist_connection"},"quic_endpoint_exist_connection"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"bool quic_endpoint_exist_connection(struct quic_endpoint_t *endpoint,\n                                    const uint8_t *cid,\n                                    size_t cid_len);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Check whether the given connection exists.")),(0,a.kt)("h4",{id:"quic_endpoint_get_connection"},"quic_endpoint_get_connection"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"struct quic_conn_t *quic_endpoint_get_connection(struct quic_endpoint_t *endpoint, uint64_t index);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Get the connection by index")),(0,a.kt)("h4",{id:"quic_endpoint_close"},"quic_endpoint_close"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void quic_endpoint_close(struct quic_endpoint_t *endpoint, bool force);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Gracefully or forcibly shutdown the endpoint."),(0,a.kt)("li",{parentName:"ul"},"If ",(0,a.kt)("inlineCode",{parentName:"li"},"force")," is false, cease creating new connections and wait for all active\nconnections to close. Otherwise, forcibly close all the active connections.")),(0,a.kt)("h2",{id:"connection"},"Connection"),(0,a.kt)("h3",{id:"create-connections"},"Create connections"),(0,a.kt)("h4",{id:"quic_endpoint_connect"},"quic_endpoint_connect"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"int quic_endpoint_connect(struct quic_endpoint_t *endpoint,\n                          const struct sockaddr *local,\n                          socklen_t local_len,\n                          const struct sockaddr *remote,\n                          socklen_t remote_len,\n                          const char *server_name,\n                          const uint8_t *session,\n                          size_t session_len,\n                          const uint8_t *token,\n                          size_t token_len,\n                          uint64_t *index);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Create a client connection. If success, the output parameter ",(0,a.kt)("inlineCode",{parentName:"li"},"index")," carrys the index of the connection.")),(0,a.kt)("h3",{id:"closing-connections"},"Closing connections"),(0,a.kt)("h4",{id:"quic_conn_close"},"quic_conn_close"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"int quic_conn_close(struct quic_conn_t *conn,\n                    bool app,\n                    uint64_t err,\n                    const uint8_t *reason,\n                    size_t reason_len);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Close the connection.")),(0,a.kt)("h3",{id:"connection-context"},"Connection Context"),(0,a.kt)("h4",{id:"quic_conn_set_context"},"quic_conn_set_context"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void quic_conn_set_context(struct quic_conn_t *conn,\n                           void *data);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set user context for the connection.")),(0,a.kt)("h4",{id:"quic_conn_context"},"quic_conn_context"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void *quic_conn_context(struct quic_conn_t *conn);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Get user context for the connection.")),(0,a.kt)("h3",{id:"connection-logging-and-tracing"},"Connection logging and tracing"),(0,a.kt)("h4",{id:"quic_conn_set_keylog_fd"},"quic_conn_set_keylog_fd"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void quic_conn_set_keylog_fd(struct quic_conn_t *conn,\n                             int fd);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set keylog file")),(0,a.kt)("h4",{id:"quic_conn_set_qlog_fd"},"quic_conn_set_qlog_fd"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void quic_conn_set_qlog_fd(struct quic_conn_t *conn,\n                           int fd,\n                           const char *title,\n                           const char *desc);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set qlog file")),(0,a.kt)("h4",{id:"quic_conn_trace_id"},"quic_conn_trace_id"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void quic_conn_trace_id(struct quic_conn_t *conn,\n                        const uint8_t **out,\n                        size_t *out_len);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Return the trace id of the connection")),(0,a.kt)("h3",{id:"miscellaneous-functions-1"},"Miscellaneous functions"),(0,a.kt)("h4",{id:"quic_conn_index"},"quic_conn_index"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"uint64_t quic_conn_index(struct quic_conn_t *conn);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Get index of the connection.")),(0,a.kt)("h4",{id:"quic_conn_is_server"},"quic_conn_is_server"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"bool quic_conn_is_server(struct quic_conn_t *conn);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Check whether the connection is a server connection.")),(0,a.kt)("h4",{id:"quic_conn_is_established"},"quic_conn_is_established"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"bool quic_conn_is_established(struct quic_conn_t *conn);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Check whether the connection handshake is complete.")),(0,a.kt)("h4",{id:"quic_conn_is_resumed"},"quic_conn_is_resumed"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"bool quic_conn_is_resumed(struct quic_conn_t *conn);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Check whether the connection is created by a resumed handshake.")),(0,a.kt)("h4",{id:"quic_conn_is_in_early_data"},"quic_conn_is_in_early_data"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"bool quic_conn_is_in_early_data(struct quic_conn_t *conn);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Check whether the connection has a pending handshake that has progressed\nenough to send or receive early data.")),(0,a.kt)("h4",{id:"quic_conn_is_multipath"},"quic_conn_is_multipath"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"bool quic_conn_is_multipath(struct quic_conn_t *conn);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Check whether the established connection works in multipath mode.")),(0,a.kt)("h4",{id:"quic_conn_application_proto"},"quic_conn_application_proto"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void quic_conn_application_proto(struct quic_conn_t *conn,\n                                 const uint8_t **out,\n                                 size_t *out_len);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Return the negotiated application level protocol.")),(0,a.kt)("h4",{id:"quic_conn_server_name"},"quic_conn_server_name"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void quic_conn_server_name(struct quic_conn_t *conn,\n                           const uint8_t **out,\n                           size_t *out_len);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Return the server name in the TLS SNI extension.")),(0,a.kt)("h4",{id:"quic_conn_session"},"quic_conn_session"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void quic_conn_session(struct quic_conn_t *conn,\n                       const uint8_t **out,\n                       size_t *out_len);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Return the session data used by resumption.")),(0,a.kt)("h4",{id:"quic_conn_is_draining"},"quic_conn_is_draining"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"bool quic_conn_is_draining(struct quic_conn_t *conn);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Check whether the connection is draining.")),(0,a.kt)("h4",{id:"quic_conn_is_closed"},"quic_conn_is_closed"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"bool quic_conn_is_closed(struct quic_conn_t *conn);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Check whether the connection is closing.")),(0,a.kt)("h4",{id:"quic_conn_is_idle_timeout"},"quic_conn_is_idle_timeout"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"bool quic_conn_is_idle_timeout(struct quic_conn_t *conn);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Check whether the connection was closed due to idle timeout.")),(0,a.kt)("h4",{id:"quic_conn_peer_error"},"quic_conn_peer_error"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"bool quic_conn_peer_error(struct quic_conn_t *conn,\n                          bool *is_app,\n                          uint64_t *error_code,\n                          const uint8_t **reason,\n                          size_t *reason_len);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Returns the error from the peer, if any.")),(0,a.kt)("h4",{id:"quic_conn_local_error"},"quic_conn_local_error"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"bool quic_conn_local_error(struct quic_conn_t *conn,\n                           bool *is_app,\n                           uint64_t *error_code,\n                           const uint8_t **reason,\n                           size_t *reason_len);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Returns the local error, if any.")),(0,a.kt)("h2",{id:"stream"},"Stream"),(0,a.kt)("h3",{id:"create-streams"},"Create streams"),(0,a.kt)("h4",{id:"quic_stream_new"},"quic_stream_new"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"int quic_stream_new(struct quic_conn_t *conn,\n                    uint64_t stream_id,\n                    uint8_t urgency,\n                    bool incremental);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Create a stream with specified priority.")),(0,a.kt)("h3",{id:"stream-priorities"},"Stream priorities"),(0,a.kt)("h4",{id:"quic_stream_set_priority"},"quic_stream_set_priority"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"int quic_stream_set_priority(struct quic_conn_t *conn,\n                             uint64_t stream_id,\n                             uint8_t urgency,\n                             bool incremental);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set the priority for a stream.")),(0,a.kt)("h3",{id:"stream-events"},"Stream events"),(0,a.kt)("p",null,"To register or unregister an interest in a read or write event, use the following functions:"),(0,a.kt)("h4",{id:"quic_stream_wantwrite"},"quic_stream_wantwrite"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"int quic_stream_wantwrite(struct quic_conn_t *conn,\n                          uint64_t stream_id,\n                          bool want);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set want write flag for a stream.")),(0,a.kt)("h4",{id:"quic_stream_wantread"},"quic_stream_wantread"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"int quic_stream_wantread(struct quic_conn_t *conn,\n                         uint64_t stream_id,\n                         bool want);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set want read flag for a stream.")),(0,a.kt)("h3",{id:"reading-from-streams"},"Reading from streams"),(0,a.kt)("h4",{id:"quic_stream_read"},"quic_stream_read"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"ssize_t quic_stream_read(struct quic_conn_t *conn,\n                         uint64_t stream_id,\n                         uint8_t *out,\n                         size_t out_len,\n                         bool *fin);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Read data from a stream.")),(0,a.kt)("h3",{id:"writing-to-streams"},"Writing to streams"),(0,a.kt)("h4",{id:"quic_stream_write"},"quic_stream_write"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"ssize_t quic_stream_write(struct quic_conn_t *conn,\n                          uint64_t stream_id,\n                          const uint8_t *buf,\n                          size_t buf_len,\n                          bool fin);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Write data to a stream.")),(0,a.kt)("h3",{id:"closing-streams"},"Closing streams"),(0,a.kt)("h4",{id:"quic_stream_shutdown"},"quic_stream_shutdown"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"int quic_stream_shutdown(struct quic_conn_t *conn,\n                         uint64_t stream_id,\n                         enum quic_shutdown direction,\n                         uint64_t err);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Shutdown stream reading or writing.")),(0,a.kt)("h3",{id:"stream-context"},"Stream context"),(0,a.kt)("h4",{id:"quic_stream_set_context"},"quic_stream_set_context"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"int quic_stream_set_context(struct quic_conn_t *conn,\n                            uint64_t stream_id,\n                            void *data);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set user context for a stream.")),(0,a.kt)("h4",{id:"quic_stream_context"},"quic_stream_context"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void *quic_stream_context(struct quic_conn_t *conn,\n                          uint64_t stream_id);\n\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Return the stream\u2019s user context.")),(0,a.kt)("h3",{id:"miscellaneous-functions-2"},"Miscellaneous functions"),(0,a.kt)("h4",{id:"quic_stream_capacity"},"quic_stream_capacity"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"ssize_t quic_stream_capacity(struct quic_conn_t *conn,\n                             uint64_t stream_id);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Return the stream\u2019s send capacity in bytes.")),(0,a.kt)("h4",{id:"quic_stream_finished"},"quic_stream_finished"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"bool quic_stream_finished(struct quic_conn_t *conn,\n                          uint64_t stream_id);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Return true if all the data has been read from the stream.")),(0,a.kt)("h2",{id:"path"},"Path"),(0,a.kt)("h3",{id:"create-paths"},"Create paths"),(0,a.kt)("h4",{id:"quic_conn_add_path"},"quic_conn_add_path"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"int quic_conn_add_path(struct quic_conn_t *conn,\n                       const struct sockaddr *local,\n                       socklen_t local_len,\n                       const struct sockaddr *remote,\n                       socklen_t remote_len,\n                       uint64_t *index);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Add a new path on the client connection.")),(0,a.kt)("h3",{id:"miscellaneous-functions-3"},"Miscellaneous functions"),(0,a.kt)("h4",{id:"quic_conn_active_path"},"quic_conn_active_path"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"bool quic_conn_active_path(const struct quic_conn_t *conn,\n                           struct quic_path_address_t *a);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Return the address of the active path")),(0,a.kt)("h4",{id:"quic_path_address_iter_t"},"quic_path_address_iter_t"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"struct quic_path_address_iter_t *quic_conn_paths(struct quic_conn_t *conn);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Return an iterator over path addresses. The caller should properly destroy it by calling ",(0,a.kt)("inlineCode",{parentName:"li"},"quic_four_tuple_iter_free"),".")),(0,a.kt)("h4",{id:"quic_conn_path_iter_next"},"quic_conn_path_iter_next"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"bool quic_conn_path_iter_next(struct quic_path_address_iter_t *iter,\n                              struct quic_path_address_t *a);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Return the address of the next path.")),(0,a.kt)("h4",{id:"quic_conn_path_iter_free"},"quic_conn_path_iter_free"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void quic_conn_path_iter_free(struct quic_path_address_iter_t *iter);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Destroy the FourTupleIter")),(0,a.kt)("h2",{id:"miscellaneous-types"},"Miscellaneous types"),(0,a.kt)("h4",{id:"quic_transport_handler_t"},"quic_transport_handler_t"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"typedef void *quic_transport_context_t;\n\ntypedef struct quic_transport_handler_t {\n  const struct quic_transport_methods_t *methods;\n  quic_transport_context_t context;\n} quic_transport_handler_t;\n")),(0,a.kt)("h4",{id:"quic_packet_out_spec_t"},"quic_packet_out_spec_t"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"typedef struct quic_packet_out_spec_t {\n  const struct iovec *iov;\n  size_t iovlen;\n  const void *src_addr;\n  socklen_t src_addr_len;\n  const void *dst_addr;\n  socklen_t dst_addr_len;\n} quic_packet_out_spec_t;\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Outgoing packets. ")),(0,a.kt)("h4",{id:"quic_shutdown"},"quic_shutdown"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"typedef enum quic_shutdown {\n  QUIC_SHUTDOWN_READ = 0,\n  QUIC_SHUTDOWN_WRITE = 1,\n} quic_shutdown;\n\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The stream's side to shutdown.")),(0,a.kt)("h4",{id:"quic_path_address_iter_t-1"},"quic_path_address_iter_t"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"typedef struct quic_path_address_iter_t quic_path_address_iter_t;\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"An iterator over FourTuple.")),(0,a.kt)("h4",{id:"quic_congestion_control_algorithm"},"quic_congestion_control_algorithm"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"typedef enum quic_congestion_control_algorithm {\n  QUIC_CONGESTION_CONTROL_ALGORITHM_CUBIC,\n  QUIC_CONGESTION_CONTROL_ALGORITHM_BBR,\n  QUIC_CONGESTION_CONTROL_ALGORITHM_BBR3,\n  QUIC_CONGESTION_CONTROL_ALGORITHM_COPA,\n} quic_congestion_control_algorithm;\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Congestion control algorithm.")))}d.isMDXComponent=!0}}]);